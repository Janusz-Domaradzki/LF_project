
LF_pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004240  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f8  080043f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080043f8  080043f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043f8  080043f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  0800440c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800440c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c251  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a0  00000000  00000000  0002c28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  0002dc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  0002e868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ac8a  00000000  00000000  0002f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7d5  00000000  00000000  0004a052  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a380a  00000000  00000000  00054827  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000335c  00000000  00000000  000f80ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043b0 	.word	0x080043b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080043b0 	.word	0x080043b0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc4e 	bl	8000a6c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_ADC_Start_DMA(&hadc1, Czujniki1, 4);
 80001d0:	2204      	movs	r2, #4
 80001d2:	490f      	ldr	r1, [pc, #60]	; (8000210 <main+0x48>)
 80001d4:	480f      	ldr	r0, [pc, #60]	; (8000214 <main+0x4c>)
 80001d6:	f000 fe5f 	bl	8000e98 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, Czujniki2, 2);
 80001da:	2202      	movs	r2, #2
 80001dc:	490e      	ldr	r1, [pc, #56]	; (8000218 <main+0x50>)
 80001de:	480f      	ldr	r0, [pc, #60]	; (800021c <main+0x54>)
 80001e0:	f000 fe5a 	bl	8000e98 <HAL_ADC_Start_DMA>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f81e 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f000 fa20 	bl	800062c <MX_GPIO_Init>
  MX_DMA_Init();
 80001ec:	f000 f9f8 	bl	80005e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80001f0:	f000 f85e 	bl	80002b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001f4:	f000 f8f6 	bl	80003e4 <MX_ADC2_Init>
  MX_TIM3_Init();
 80001f8:	f000 f960 	bl	80004bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80001fc:	2100      	movs	r1, #0
 80001fe:	4808      	ldr	r0, [pc, #32]	; (8000220 <main+0x58>)
 8000200:	f003 f9a8 	bl	8003554 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000204:	2104      	movs	r1, #4
 8000206:	4806      	ldr	r0, [pc, #24]	; (8000220 <main+0x58>)
 8000208:	f003 f9a4 	bl	8003554 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x44>
 800020e:	bf00      	nop
 8000210:	20000160 	.word	0x20000160
 8000214:	200000c8 	.word	0x200000c8
 8000218:	2000015c 	.word	0x2000015c
 800021c:	2000002c 	.word	0x2000002c
 8000220:	2000007c 	.word	0x2000007c

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f004 f8b4 	bl	80043a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000246:	2301      	movs	r3, #1
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000258:	2302      	movs	r3, #2
 800025a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000262:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000266:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0318 	add.w	r3, r7, #24
 800026c:	4618      	mov	r0, r3
 800026e:	f001 ffcb 	bl	8002208 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000278:	f000 fa22 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2302      	movs	r3, #2
 8000282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f002 febe 	bl	8003018 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a2:	f000 fa0d 	bl	80006c0 <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	; 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	; 0x28
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002b6:	f107 031c 	add.w	r3, r7, #28
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
 80002d0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d2:	4b43      	ldr	r3, [pc, #268]	; (80003e0 <MX_ADC1_Init+0x130>)
 80002d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002da:	4b41      	ldr	r3, [pc, #260]	; (80003e0 <MX_ADC1_Init+0x130>)
 80002dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80002e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002e2:	4b3f      	ldr	r3, [pc, #252]	; (80003e0 <MX_ADC1_Init+0x130>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002e8:	4b3d      	ldr	r3, [pc, #244]	; (80003e0 <MX_ADC1_Init+0x130>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002ee:	4b3c      	ldr	r3, [pc, #240]	; (80003e0 <MX_ADC1_Init+0x130>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f4:	4b3a      	ldr	r3, [pc, #232]	; (80003e0 <MX_ADC1_Init+0x130>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002fc:	4b38      	ldr	r3, [pc, #224]	; (80003e0 <MX_ADC1_Init+0x130>)
 80002fe:	2200      	movs	r2, #0
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000302:	4b37      	ldr	r3, [pc, #220]	; (80003e0 <MX_ADC1_Init+0x130>)
 8000304:	2201      	movs	r2, #1
 8000306:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000308:	4b35      	ldr	r3, [pc, #212]	; (80003e0 <MX_ADC1_Init+0x130>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800030e:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <MX_ADC1_Init+0x130>)
 8000310:	2204      	movs	r2, #4
 8000312:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000314:	4b32      	ldr	r3, [pc, #200]	; (80003e0 <MX_ADC1_Init+0x130>)
 8000316:	2201      	movs	r2, #1
 8000318:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800031c:	4b30      	ldr	r3, [pc, #192]	; (80003e0 <MX_ADC1_Init+0x130>)
 800031e:	2204      	movs	r2, #4
 8000320:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000322:	4b2f      	ldr	r3, [pc, #188]	; (80003e0 <MX_ADC1_Init+0x130>)
 8000324:	2200      	movs	r2, #0
 8000326:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000328:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <MX_ADC1_Init+0x130>)
 800032a:	2201      	movs	r2, #1
 800032c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800032e:	482c      	ldr	r0, [pc, #176]	; (80003e0 <MX_ADC1_Init+0x130>)
 8000330:	f000 fc20 	bl	8000b74 <HAL_ADC_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800033a:	f000 f9c1 	bl	80006c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000342:	f107 031c 	add.w	r3, r7, #28
 8000346:	4619      	mov	r1, r3
 8000348:	4825      	ldr	r0, [pc, #148]	; (80003e0 <MX_ADC1_Init+0x130>)
 800034a:	f001 f941 	bl	80015d0 <HAL_ADCEx_MultiModeConfigChannel>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000354:	f000 f9b4 	bl	80006c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000358:	2301      	movs	r3, #1
 800035a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800035c:	2301      	movs	r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000364:	2305      	movs	r3, #5
 8000366:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4619      	mov	r1, r3
 8000374:	481a      	ldr	r0, [pc, #104]	; (80003e0 <MX_ADC1_Init+0x130>)
 8000376:	f000 fe69 	bl	800104c <HAL_ADC_ConfigChannel>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000380:	f000 f99e 	bl	80006c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000384:	2302      	movs	r3, #2
 8000386:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000388:	2302      	movs	r3, #2
 800038a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4619      	mov	r1, r3
 8000390:	4813      	ldr	r0, [pc, #76]	; (80003e0 <MX_ADC1_Init+0x130>)
 8000392:	f000 fe5b 	bl	800104c <HAL_ADC_ConfigChannel>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800039c:	f000 f990 	bl	80006c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003a0:	2303      	movs	r3, #3
 80003a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003a4:	2303      	movs	r3, #3
 80003a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4619      	mov	r1, r3
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <MX_ADC1_Init+0x130>)
 80003ae:	f000 fe4d 	bl	800104c <HAL_ADC_ConfigChannel>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80003b8:	f000 f982 	bl	80006c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003bc:	2304      	movs	r3, #4
 80003be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80003c0:	2304      	movs	r3, #4
 80003c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4619      	mov	r1, r3
 80003c8:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_ADC1_Init+0x130>)
 80003ca:	f000 fe3f 	bl	800104c <HAL_ADC_ConfigChannel>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80003d4:	f000 f974 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d8:	bf00      	nop
 80003da:	3728      	adds	r7, #40	; 0x28
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	200000c8 	.word	0x200000c8

080003e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ea:	463b      	mov	r3, r7
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
 80003f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80003fa:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <MX_ADC2_Init+0xd0>)
 80003fc:	4a2e      	ldr	r2, [pc, #184]	; (80004b8 <MX_ADC2_Init+0xd4>)
 80003fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000400:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <MX_ADC2_Init+0xd0>)
 8000402:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000406:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <MX_ADC2_Init+0xd0>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800040e:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <MX_ADC2_Init+0xd0>)
 8000410:	2201      	movs	r2, #1
 8000412:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000414:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <MX_ADC2_Init+0xd0>)
 8000416:	2201      	movs	r2, #1
 8000418:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <MX_ADC2_Init+0xd0>)
 800041c:	2200      	movs	r2, #0
 800041e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_ADC2_Init+0xd0>)
 8000424:	2200      	movs	r2, #0
 8000426:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <MX_ADC2_Init+0xd0>)
 800042a:	2201      	movs	r2, #1
 800042c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MX_ADC2_Init+0xd0>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <MX_ADC2_Init+0xd0>)
 8000436:	2202      	movs	r2, #2
 8000438:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800043a:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_ADC2_Init+0xd0>)
 800043c:	2201      	movs	r2, #1
 800043e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000442:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_ADC2_Init+0xd0>)
 8000444:	2204      	movs	r2, #4
 8000446:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_ADC2_Init+0xd0>)
 800044a:	2200      	movs	r2, #0
 800044c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <MX_ADC2_Init+0xd0>)
 8000450:	2200      	movs	r2, #0
 8000452:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000454:	4817      	ldr	r0, [pc, #92]	; (80004b4 <MX_ADC2_Init+0xd0>)
 8000456:	f000 fb8d 	bl	8000b74 <HAL_ADC_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000460:	f000 f92e 	bl	80006c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000464:	2301      	movs	r3, #1
 8000466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000468:	2301      	movs	r3, #1
 800046a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000470:	2305      	movs	r3, #5
 8000472:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000474:	2300      	movs	r3, #0
 8000476:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800047c:	463b      	mov	r3, r7
 800047e:	4619      	mov	r1, r3
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <MX_ADC2_Init+0xd0>)
 8000482:	f000 fde3 	bl	800104c <HAL_ADC_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800048c:	f000 f918 	bl	80006c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000490:	2302      	movs	r3, #2
 8000492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000494:	2302      	movs	r3, #2
 8000496:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_ADC2_Init+0xd0>)
 800049e:	f000 fdd5 	bl	800104c <HAL_ADC_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80004a8:	f000 f90a 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	50000100 	.word	0x50000100

080004bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	; 0x38
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d0:	f107 031c 	add.w	r3, r7, #28
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ee:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <MX_TIM3_Init+0x11c>)
 80004f0:	4a3a      	ldr	r2, [pc, #232]	; (80005dc <MX_TIM3_Init+0x120>)
 80004f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 80004f4:	4b38      	ldr	r3, [pc, #224]	; (80005d8 <MX_TIM3_Init+0x11c>)
 80004f6:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80004fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fc:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <MX_TIM3_Init+0x11c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <MX_TIM3_Init+0x11c>)
 8000504:	2263      	movs	r2, #99	; 0x63
 8000506:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000508:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <MX_TIM3_Init+0x11c>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050e:	4b32      	ldr	r3, [pc, #200]	; (80005d8 <MX_TIM3_Init+0x11c>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000514:	4830      	ldr	r0, [pc, #192]	; (80005d8 <MX_TIM3_Init+0x11c>)
 8000516:	f002 ff65 	bl	80033e4 <HAL_TIM_Base_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000520:	f000 f8ce 	bl	80006c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000528:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800052a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800052e:	4619      	mov	r1, r3
 8000530:	4829      	ldr	r0, [pc, #164]	; (80005d8 <MX_TIM3_Init+0x11c>)
 8000532:	f003 fa0b 	bl	800394c <HAL_TIM_ConfigClockSource>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800053c:	f000 f8c0 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000540:	4825      	ldr	r0, [pc, #148]	; (80005d8 <MX_TIM3_Init+0x11c>)
 8000542:	f002 ffa6 	bl	8003492 <HAL_TIM_PWM_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800054c:	f000 f8b8 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000558:	f107 031c 	add.w	r3, r7, #28
 800055c:	4619      	mov	r1, r3
 800055e:	481e      	ldr	r0, [pc, #120]	; (80005d8 <MX_TIM3_Init+0x11c>)
 8000560:	f003 fe8c 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800056a:	f000 f8a9 	bl	80006c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056e:	2360      	movs	r3, #96	; 0x60
 8000570:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	4619      	mov	r1, r3
 8000584:	4814      	ldr	r0, [pc, #80]	; (80005d8 <MX_TIM3_Init+0x11c>)
 8000586:	f003 f8d1 	bl	800372c <HAL_TIM_PWM_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000590:	f000 f896 	bl	80006c0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <MX_TIM3_Init+0x11c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	699a      	ldr	r2, [r3, #24]
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_TIM3_Init+0x11c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f022 0208 	bic.w	r2, r2, #8
 80005a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	2204      	movs	r2, #4
 80005a8:	4619      	mov	r1, r3
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <MX_TIM3_Init+0x11c>)
 80005ac:	f003 f8be 	bl	800372c <HAL_TIM_PWM_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 80005b6:	f000 f883 	bl	80006c0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <MX_TIM3_Init+0x11c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	699a      	ldr	r2, [r3, #24]
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <MX_TIM3_Init+0x11c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <MX_TIM3_Init+0x11c>)
 80005cc:	f000 f99a 	bl	8000904 <HAL_TIM_MspPostInit>

}
 80005d0:	bf00      	nop
 80005d2:	3738      	adds	r7, #56	; 0x38
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	40000400 	.word	0x40000400

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_DMA_Init+0x48>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <MX_DMA_Init+0x48>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_DMA_Init+0x48>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	200b      	movs	r0, #11
 8000604:	f001 faa9 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000608:	200b      	movs	r0, #11
 800060a:	f001 fac2 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	200c      	movs	r0, #12
 8000614:	f001 faa1 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000618:	200c      	movs	r0, #12
 800061a:	f001 faba 	bl	8001b92 <HAL_NVIC_EnableIRQ>

}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_GPIO_Init+0x8c>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2178      	movs	r1, #120	; 0x78
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0x90>)
 8000690:	f001 fda2 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AIN1_Pin AIN2_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|BIN1_Pin|BIN2_Pin;
 8000694:	2378      	movs	r3, #120	; 0x78
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x90>)
 80006ac:	f001 fc22 	bl	8001ef4 <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000400 	.word	0x48000400

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x44>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x44>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x44>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x44>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x44>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x44>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000738:	d156      	bne.n	80007e8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800073a:	4b5b      	ldr	r3, [pc, #364]	; (80008a8 <HAL_ADC_MspInit+0x190>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a59      	ldr	r2, [pc, #356]	; (80008a8 <HAL_ADC_MspInit+0x190>)
 8000742:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000744:	4b58      	ldr	r3, [pc, #352]	; (80008a8 <HAL_ADC_MspInit+0x190>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d10b      	bne.n	8000764 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800074c:	4b57      	ldr	r3, [pc, #348]	; (80008ac <HAL_ADC_MspInit+0x194>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a56      	ldr	r2, [pc, #344]	; (80008ac <HAL_ADC_MspInit+0x194>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6153      	str	r3, [r2, #20]
 8000758:	4b54      	ldr	r3, [pc, #336]	; (80008ac <HAL_ADC_MspInit+0x194>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b51      	ldr	r3, [pc, #324]	; (80008ac <HAL_ADC_MspInit+0x194>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	4a50      	ldr	r2, [pc, #320]	; (80008ac <HAL_ADC_MspInit+0x194>)
 800076a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076e:	6153      	str	r3, [r2, #20]
 8000770:	4b4e      	ldr	r3, [pc, #312]	; (80008ac <HAL_ADC_MspInit+0x194>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CNY1_Pin|CNY2_Pin|CNY3_Pin|CNY4_Pin;
 800077c:	230f      	movs	r3, #15
 800077e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000780:	2303      	movs	r3, #3
 8000782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000792:	f001 fbaf 	bl	8001ef4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000796:	4b46      	ldr	r3, [pc, #280]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 8000798:	4a46      	ldr	r2, [pc, #280]	; (80008b4 <HAL_ADC_MspInit+0x19c>)
 800079a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079c:	4b44      	ldr	r3, [pc, #272]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a2:	4b43      	ldr	r3, [pc, #268]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007a8:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ae:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 80007b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007b6:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 80007b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007be:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 80007c0:	2220      	movs	r2, #32
 80007c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007c4:	4b3a      	ldr	r3, [pc, #232]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007ca:	4839      	ldr	r0, [pc, #228]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 80007cc:	f001 f9fb 	bl	8001bc6 <HAL_DMA_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80007d6:	f7ff ff73 	bl	80006c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a34      	ldr	r2, [pc, #208]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
 80007e0:	4a33      	ldr	r2, [pc, #204]	; (80008b0 <HAL_ADC_MspInit+0x198>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80007e6:	e05a      	b.n	800089e <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <HAL_ADC_MspInit+0x1a0>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d155      	bne.n	800089e <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <HAL_ADC_MspInit+0x190>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	4a2b      	ldr	r2, [pc, #172]	; (80008a8 <HAL_ADC_MspInit+0x190>)
 80007fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <HAL_ADC_MspInit+0x190>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10b      	bne.n	800081c <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <HAL_ADC_MspInit+0x194>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a28      	ldr	r2, [pc, #160]	; (80008ac <HAL_ADC_MspInit+0x194>)
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080e:	6153      	str	r3, [r2, #20]
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <HAL_ADC_MspInit+0x194>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <HAL_ADC_MspInit+0x194>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <HAL_ADC_MspInit+0x194>)
 8000822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000826:	6153      	str	r3, [r2, #20]
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <HAL_ADC_MspInit+0x194>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CNY5_Pin|CNY6_Pin;
 8000834:	2330      	movs	r3, #48	; 0x30
 8000836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f001 fb53 	bl	8001ef4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <HAL_ADC_MspInit+0x1a8>)
 8000852:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 8000868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800086c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 8000870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000874:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 8000878:	2220      	movs	r2, #32
 800087a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 8000884:	f001 f99f 	bl	8001bc6 <HAL_DMA_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 800088e:	f7ff ff17 	bl	80006c0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a09      	ldr	r2, [pc, #36]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 8000896:	639a      	str	r2, [r3, #56]	; 0x38
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_ADC_MspInit+0x1a4>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000028 	.word	0x20000028
 80008ac:	40021000 	.word	0x40021000
 80008b0:	20000118 	.word	0x20000118
 80008b4:	40020008 	.word	0x40020008
 80008b8:	50000100 	.word	0x50000100
 80008bc:	20000168 	.word	0x20000168
 80008c0:	4002001c 	.word	0x4002001c

080008c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_TIM_Base_MspInit+0x38>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d10b      	bne.n	80008ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_TIM_Base_MspInit+0x3c>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a09      	ldr	r2, [pc, #36]	; (8000900 <HAL_TIM_Base_MspInit+0x3c>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <HAL_TIM_Base_MspInit+0x3c>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40000400 	.word	0x40000400
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a11      	ldr	r2, [pc, #68]	; (8000968 <HAL_TIM_MspPostInit+0x64>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d11c      	bne.n	8000960 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_TIM_MspPostInit+0x68>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_TIM_MspPostInit+0x68>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_TIM_MspPostInit+0x68>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_A_Pin|PWM_B_Pin;
 800093e:	23c0      	movs	r3, #192	; 0xc0
 8000940:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800094e:	2302      	movs	r3, #2
 8000950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f001 faca 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40000400 	.word	0x40000400
 800096c:	40021000 	.word	0x40021000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f898 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <DMA1_Channel1_IRQHandler+0x10>)
 80009d2:	f001 f99e 	bl	8001d12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000118 	.word	0x20000118

080009e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <DMA1_Channel2_IRQHandler+0x10>)
 80009e6:	f001 f994 	bl	8001d12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000168 	.word	0x20000168

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490e      	ldr	r1, [pc, #56]	; (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a42:	f7ff ffd7 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f003 fc87 	bl	8004358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fbbd 	bl	80001c8 <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a50:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a5c:	08004400 	.word	0x08004400
  ldr r2, =_sbss
 8000a60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a64:	200001b0 	.word	0x200001b0

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x28>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f001 f861 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fe22 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f879 	bl	8001bae <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f001 f841 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200001ac 	.word	0x200001ac

08000b20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200001ac 	.word	0x200001ac

08000b38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b09a      	sub	sp, #104	; 0x68
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e172      	b.n	8000e7a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d176      	bne.n	8000c94 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d152      	bne.n	8000c54 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fda5 	bl	8000718 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d13b      	bne.n	8000c54 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 fe81 	bl	80018e4 <ADC_Disable>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f003 0310 	and.w	r3, r3, #16
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d12f      	bne.n	8000c54 <HAL_ADC_Init+0xe0>
 8000bf4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d12b      	bne.n	8000c54 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c04:	f023 0302 	bic.w	r3, r3, #2
 8000c08:	f043 0202 	orr.w	r2, r3, #2
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c1e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c2e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c30:	4b94      	ldr	r3, [pc, #592]	; (8000e84 <HAL_ADC_Init+0x310>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a94      	ldr	r2, [pc, #592]	; (8000e88 <HAL_ADC_Init+0x314>)
 8000c36:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3a:	0c9a      	lsrs	r2, r3, #18
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c46:	e002      	b.n	8000c4e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f9      	bne.n	8000c48 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d007      	beq.n	8000c72 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c70:	d110      	bne.n	8000c94 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f023 0312 	bic.w	r3, r3, #18
 8000c7a:	f043 0210 	orr.w	r2, r3, #16
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f043 0201 	orr.w	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f040 80df 	bne.w	8000e60 <HAL_ADC_Init+0x2ec>
 8000ca2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 80da 	bne.w	8000e60 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 80d2 	bne.w	8000e60 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cc4:	f043 0202 	orr.w	r2, r3, #2
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ccc:	4b6f      	ldr	r3, [pc, #444]	; (8000e8c <HAL_ADC_Init+0x318>)
 8000cce:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cd8:	d102      	bne.n	8000ce0 <HAL_ADC_Init+0x16c>
 8000cda:	4b6d      	ldr	r3, [pc, #436]	; (8000e90 <HAL_ADC_Init+0x31c>)
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	e002      	b.n	8000ce6 <HAL_ADC_Init+0x172>
 8000ce0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ce4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d108      	bne.n	8000d06 <HAL_ADC_Init+0x192>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d101      	bne.n	8000d06 <HAL_ADC_Init+0x192>
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <HAL_ADC_Init+0x194>
 8000d06:	2300      	movs	r3, #0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d11c      	bne.n	8000d46 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d010      	beq.n	8000d34 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d107      	bne.n	8000d2e <HAL_ADC_Init+0x1ba>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d101      	bne.n	8000d2e <HAL_ADC_Init+0x1ba>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <HAL_ADC_Init+0x1bc>
 8000d2e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d108      	bne.n	8000d46 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	431a      	orrs	r2, r3
 8000d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d44:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7e5b      	ldrb	r3, [r3, #25]
 8000d4a:	035b      	lsls	r3, r3, #13
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d50:	2a01      	cmp	r2, #1
 8000d52:	d002      	beq.n	8000d5a <HAL_ADC_Init+0x1e6>
 8000d54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d58:	e000      	b.n	8000d5c <HAL_ADC_Init+0x1e8>
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d11b      	bne.n	8000db2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7e5b      	ldrb	r3, [r3, #25]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d109      	bne.n	8000d96 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	3b01      	subs	r3, #1
 8000d88:	045a      	lsls	r2, r3, #17
 8000d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d92:	663b      	str	r3, [r7, #96]	; 0x60
 8000d94:	e00d      	b.n	8000db2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d9e:	f043 0220 	orr.w	r2, r3, #32
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f043 0201 	orr.w	r2, r3, #1
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d007      	beq.n	8000dca <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d114      	bne.n	8000e02 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000de6:	f023 0302 	bic.w	r3, r3, #2
 8000dea:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7e1b      	ldrb	r3, [r3, #24]
 8000df0:	039a      	lsls	r2, r3, #14
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <HAL_ADC_Init+0x320>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e12:	430b      	orrs	r3, r1
 8000e14:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d10c      	bne.n	8000e38 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f023 010f 	bic.w	r1, r3, #15
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
 8000e36:	e007      	b.n	8000e48 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 020f 	bic.w	r2, r2, #15
 8000e46:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f023 0303 	bic.w	r3, r3, #3
 8000e56:	f043 0201 	orr.w	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e5e:	e00a      	b.n	8000e76 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f023 0312 	bic.w	r3, r3, #18
 8000e68:	f043 0210 	orr.w	r2, r3, #16
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e70:	2301      	movs	r3, #1
 8000e72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3768      	adds	r7, #104	; 0x68
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000000 	.word	0x20000000
 8000e88:	431bde83 	.word	0x431bde83
 8000e8c:	50000300 	.word	0x50000300
 8000e90:	50000100 	.word	0x50000100
 8000e94:	fff0c007 	.word	0xfff0c007

08000e98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f040 80b9 	bne.w	800102a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_Start_DMA+0x2e>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e0b4      	b.n	8001030 <HAL_ADC_Start_DMA+0x198>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000ece:	4b5a      	ldr	r3, [pc, #360]	; (8001038 <HAL_ADC_Start_DMA+0x1a0>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 031f 	and.w	r3, r3, #31
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f040 80a0 	bne.w	800101c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f000 fca3 	bl	8001828 <ADC_Enable>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f040 8092 	bne.w	8001012 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ef6:	f023 0301 	bic.w	r3, r3, #1
 8000efa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f02:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <HAL_ADC_Start_DMA+0x1a0>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d004      	beq.n	8000f18 <HAL_ADC_Start_DMA+0x80>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f16:	d115      	bne.n	8000f44 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d027      	beq.n	8000f82 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f42:	e01e      	b.n	8000f82 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f58:	d004      	beq.n	8000f64 <HAL_ADC_Start_DMA+0xcc>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a37      	ldr	r2, [pc, #220]	; (800103c <HAL_ADC_Start_DMA+0x1a4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d10e      	bne.n	8000f82 <HAL_ADC_Start_DMA+0xea>
 8000f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f8e:	d106      	bne.n	8000f9e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	f023 0206 	bic.w	r2, r3, #6
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f9c:	e002      	b.n	8000fa4 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb0:	4a23      	ldr	r2, [pc, #140]	; (8001040 <HAL_ADC_Start_DMA+0x1a8>)
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb8:	4a22      	ldr	r2, [pc, #136]	; (8001044 <HAL_ADC_Start_DMA+0x1ac>)
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <HAL_ADC_Start_DMA+0x1b0>)
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	221c      	movs	r2, #28
 8000fca:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0210 	orr.w	r2, r2, #16
 8000fda:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	3340      	adds	r3, #64	; 0x40
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f000 fe2a 	bl	8001c54 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0204 	orr.w	r2, r2, #4
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	e00d      	b.n	800102e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800101a:	e008      	b.n	800102e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001028:	e001      	b.n	800102e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800102a:	2302      	movs	r3, #2
 800102c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800102e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	50000300 	.word	0x50000300
 800103c:	50000100 	.word	0x50000100
 8001040:	0800175d 	.word	0x0800175d
 8001044:	080017d7 	.word	0x080017d7
 8001048:	080017f3 	.word	0x080017f3

0800104c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800104c:	b480      	push	{r7}
 800104e:	b09b      	sub	sp, #108	; 0x6c
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_ADC_ConfigChannel+0x22>
 800106a:	2302      	movs	r3, #2
 800106c:	e2a5      	b.n	80015ba <HAL_ADC_ConfigChannel+0x56e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	f040 8289 	bne.w	8001598 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b04      	cmp	r3, #4
 800108c:	d81c      	bhi.n	80010c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	461a      	mov	r2, r3
 80010a2:	231f      	movs	r3, #31
 80010a4:	4093      	lsls	r3, r2
 80010a6:	43db      	mvns	r3, r3
 80010a8:	4019      	ands	r1, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa00 f203 	lsl.w	r2, r0, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
 80010c6:	e063      	b.n	8001190 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b09      	cmp	r3, #9
 80010ce:	d81e      	bhi.n	800110e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	3b1e      	subs	r3, #30
 80010e4:	221f      	movs	r2, #31
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	4019      	ands	r1, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	3b1e      	subs	r3, #30
 8001100:	fa00 f203 	lsl.w	r2, r0, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	635a      	str	r2, [r3, #52]	; 0x34
 800110c:	e040      	b.n	8001190 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b0e      	cmp	r3, #14
 8001114:	d81e      	bhi.n	8001154 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	3b3c      	subs	r3, #60	; 0x3c
 800112a:	221f      	movs	r2, #31
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	4019      	ands	r1, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	3b3c      	subs	r3, #60	; 0x3c
 8001146:	fa00 f203 	lsl.w	r2, r0, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
 8001152:	e01d      	b.n	8001190 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	3b5a      	subs	r3, #90	; 0x5a
 8001168:	221f      	movs	r2, #31
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	4019      	ands	r1, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	3b5a      	subs	r3, #90	; 0x5a
 8001184:	fa00 f203 	lsl.w	r2, r0, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	f040 80e5 	bne.w	800136a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b09      	cmp	r3, #9
 80011a6:	d91c      	bls.n	80011e2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6999      	ldr	r1, [r3, #24]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	3b1e      	subs	r3, #30
 80011ba:	2207      	movs	r2, #7
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4019      	ands	r1, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	6898      	ldr	r0, [r3, #8]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	3b1e      	subs	r3, #30
 80011d4:	fa00 f203 	lsl.w	r2, r0, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	619a      	str	r2, [r3, #24]
 80011e0:	e019      	b.n	8001216 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6959      	ldr	r1, [r3, #20]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	2207      	movs	r2, #7
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	4019      	ands	r1, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	6898      	ldr	r0, [r3, #8]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	fa00 f203 	lsl.w	r2, r0, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	3b01      	subs	r3, #1
 8001234:	2b03      	cmp	r3, #3
 8001236:	d84f      	bhi.n	80012d8 <HAL_ADC_ConfigChannel+0x28c>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <HAL_ADC_ConfigChannel+0x1f4>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	08001251 	.word	0x08001251
 8001244:	08001273 	.word	0x08001273
 8001248:	08001295 	.word	0x08001295
 800124c:	080012b7 	.word	0x080012b7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001256:	4b9e      	ldr	r3, [pc, #632]	; (80014d0 <HAL_ADC_ConfigChannel+0x484>)
 8001258:	4013      	ands	r3, r2
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	0691      	lsls	r1, r2, #26
 8001260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001262:	430a      	orrs	r2, r1
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800126e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001270:	e07e      	b.n	8001370 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001278:	4b95      	ldr	r3, [pc, #596]	; (80014d0 <HAL_ADC_ConfigChannel+0x484>)
 800127a:	4013      	ands	r3, r2
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	0691      	lsls	r1, r2, #26
 8001282:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001284:	430a      	orrs	r2, r1
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001290:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001292:	e06d      	b.n	8001370 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800129a:	4b8d      	ldr	r3, [pc, #564]	; (80014d0 <HAL_ADC_ConfigChannel+0x484>)
 800129c:	4013      	ands	r3, r2
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	0691      	lsls	r1, r2, #26
 80012a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012a6:	430a      	orrs	r2, r1
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012b2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012b4:	e05c      	b.n	8001370 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012bc:	4b84      	ldr	r3, [pc, #528]	; (80014d0 <HAL_ADC_ConfigChannel+0x484>)
 80012be:	4013      	ands	r3, r2
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	0691      	lsls	r1, r2, #26
 80012c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c8:	430a      	orrs	r2, r1
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012d4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012d6:	e04b      	b.n	8001370 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	069b      	lsls	r3, r3, #26
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d107      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012fa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001302:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	069b      	lsls	r3, r3, #26
 800130c:	429a      	cmp	r2, r3
 800130e:	d107      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800131e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	069b      	lsls	r3, r3, #26
 8001330:	429a      	cmp	r2, r3
 8001332:	d107      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001342:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800134a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	069b      	lsls	r3, r3, #26
 8001354:	429a      	cmp	r2, r3
 8001356:	d10a      	bne.n	800136e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001366:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001368:	e001      	b.n	800136e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800136a:	bf00      	nop
 800136c:	e000      	b.n	8001370 <HAL_ADC_ConfigChannel+0x324>
      break;
 800136e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d108      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x344>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x344>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_ADC_ConfigChannel+0x346>
 8001390:	2300      	movs	r3, #0
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 810b 	bne.w	80015ae <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d00f      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	400a      	ands	r2, r1
 80013ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80013be:	e049      	b.n	8001454 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2201      	movs	r2, #1
 80013ce:	409a      	lsls	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b09      	cmp	r3, #9
 80013e0:	d91c      	bls.n	800141c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6999      	ldr	r1, [r3, #24]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	3b1b      	subs	r3, #27
 80013f4:	2207      	movs	r2, #7
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	4019      	ands	r1, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	6898      	ldr	r0, [r3, #8]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	3b1b      	subs	r3, #27
 800140e:	fa00 f203 	lsl.w	r2, r0, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	619a      	str	r2, [r3, #24]
 800141a:	e01b      	b.n	8001454 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6959      	ldr	r1, [r3, #20]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	2207      	movs	r2, #7
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	4019      	ands	r1, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	6898      	ldr	r0, [r3, #8]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	fa00 f203 	lsl.w	r2, r0, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <HAL_ADC_ConfigChannel+0x488>)
 8001456:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b10      	cmp	r3, #16
 800145e:	d105      	bne.n	800146c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001468:	2b00      	cmp	r3, #0
 800146a:	d015      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d105      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001484:	2b12      	cmp	r3, #18
 8001486:	f040 8092 	bne.w	80015ae <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800148a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 808b 	bne.w	80015ae <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a0:	d102      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x45c>
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_ADC_ConfigChannel+0x48c>)
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e002      	b.n	80014ae <HAL_ADC_ConfigChannel+0x462>
 80014a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014ac:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d10f      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x490>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d108      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x490>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e007      	b.n	80014de <HAL_ADC_ConfigChannel+0x492>
 80014ce:	bf00      	nop
 80014d0:	83fff000 	.word	0x83fff000
 80014d4:	50000300 	.word	0x50000300
 80014d8:	50000100 	.word	0x50000100
 80014dc:	2300      	movs	r3, #0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d150      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014e2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d010      	beq.n	800150a <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d107      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x4b8>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x4b8>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_ADC_ConfigChannel+0x4ba>
 8001504:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001506:	2b00      	cmp	r3, #0
 8001508:	d13c      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b10      	cmp	r3, #16
 8001510:	d11d      	bne.n	800154e <HAL_ADC_ConfigChannel+0x502>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151a:	d118      	bne.n	800154e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001526:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_ADC_ConfigChannel+0x57c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a27      	ldr	r2, [pc, #156]	; (80015cc <HAL_ADC_ConfigChannel+0x580>)
 800152e:	fba2 2303 	umull	r2, r3, r2, r3
 8001532:	0c9a      	lsrs	r2, r3, #18
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800153e:	e002      	b.n	8001546 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3b01      	subs	r3, #1
 8001544:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f9      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800154c:	e02e      	b.n	80015ac <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b11      	cmp	r3, #17
 8001554:	d10b      	bne.n	800156e <HAL_ADC_ConfigChannel+0x522>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800155e:	d106      	bne.n	800156e <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800156a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800156c:	e01e      	b.n	80015ac <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b12      	cmp	r3, #18
 8001574:	d11a      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800157e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001580:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001582:	e013      	b.n	80015ac <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f043 0220 	orr.w	r2, r3, #32
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001596:	e00a      	b.n	80015ae <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f043 0220 	orr.w	r2, r3, #32
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015aa:	e000      	b.n	80015ae <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015ac:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80015b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	376c      	adds	r7, #108	; 0x6c
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000
 80015cc:	431bde83 	.word	0x431bde83

080015d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b099      	sub	sp, #100	; 0x64
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e8:	d102      	bne.n	80015f0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80015ea:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	e002      	b.n	80015f6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80015f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015f4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0a2      	b.n	8001746 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800160a:	2302      	movs	r3, #2
 800160c:	e09b      	b.n	8001746 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d17f      	bne.n	8001724 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d179      	bne.n	8001724 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001630:	4b49      	ldr	r3, [pc, #292]	; (8001758 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001632:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d040      	beq.n	80016be <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800163c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800164e:	035b      	lsls	r3, r3, #13
 8001650:	430b      	orrs	r3, r1
 8001652:	431a      	orrs	r2, r3
 8001654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001656:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d108      	bne.n	8001678 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001678:	2300      	movs	r3, #0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d15c      	bne.n	8001738 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800169a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800169c:	2b00      	cmp	r3, #0
 800169e:	d14b      	bne.n	8001738 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80016a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80016a8:	f023 030f 	bic.w	r3, r3, #15
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	6811      	ldr	r1, [r2, #0]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	6892      	ldr	r2, [r2, #8]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	431a      	orrs	r2, r3
 80016b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016ba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016bc:	e03c      	b.n	8001738 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80016be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016c8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80016ea:	2300      	movs	r3, #0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d123      	bne.n	8001738 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800170c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	d112      	bne.n	8001738 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800171a:	f023 030f 	bic.w	r3, r3, #15
 800171e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001720:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001722:	e009      	b.n	8001738 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f043 0220 	orr.w	r2, r3, #32
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001736:	e000      	b.n	800173a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001738:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001746:	4618      	mov	r0, r3
 8001748:	3764      	adds	r7, #100	; 0x64
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	50000100 	.word	0x50000100
 8001758:	50000300 	.word	0x50000300

0800175c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001772:	2b00      	cmp	r3, #0
 8001774:	d126      	bne.n	80017c4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800178c:	2b00      	cmp	r3, #0
 800178e:	d115      	bne.n	80017bc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001794:	2b00      	cmp	r3, #0
 8001796:	d111      	bne.n	80017bc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff f9bb 	bl	8000b38 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017c2:	e004      	b.n	80017ce <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff f9b1 	bl	8000b4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f043 0204 	orr.w	r2, r3, #4
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7ff f9a1 	bl	8000b60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d108      	bne.n	8001854 <ADC_Enable+0x2c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <ADC_Enable+0x2c>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <ADC_Enable+0x2e>
 8001854:	2300      	movs	r3, #0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d13c      	bne.n	80018d4 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <ADC_Enable+0xb8>)
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00d      	beq.n	8001884 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f043 0210 	orr.w	r2, r3, #16
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e028      	b.n	80018d6 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001894:	f7ff f944 	bl	8000b20 <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800189a:	e014      	b.n	80018c6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800189c:	f7ff f940 	bl	8000b20 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d90d      	bls.n	80018c6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f043 0210 	orr.w	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e007      	b.n	80018d6 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d1e3      	bne.n	800189c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	8000003f 	.word	0x8000003f

080018e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d108      	bne.n	8001910 <ADC_Disable+0x2c>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <ADC_Disable+0x2c>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <ADC_Disable+0x2e>
 8001910:	2300      	movs	r3, #0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d040      	beq.n	8001998 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030d 	and.w	r3, r3, #13
 8001920:	2b01      	cmp	r3, #1
 8001922:	d10f      	bne.n	8001944 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0202 	orr.w	r2, r2, #2
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2203      	movs	r2, #3
 800193a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800193c:	f7ff f8f0 	bl	8000b20 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001942:	e022      	b.n	800198a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f043 0210 	orr.w	r2, r3, #16
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e01c      	b.n	800199a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001960:	f7ff f8de 	bl	8000b20 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d90d      	bls.n	800198a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f043 0210 	orr.w	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e007      	b.n	800199a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d0e3      	beq.n	8001960 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff29 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff3e 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff8e 	bl	8001a98 <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff31 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffa2 	bl	8001b00 <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e037      	b.n	8001c4c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bf2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f940 	bl	8001eb4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}  
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_DMA_Start_IT+0x20>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e04a      	b.n	8001d0a <HAL_DMA_Start_IT+0xb6>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d13a      	bne.n	8001cfc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f8d4 	bl	8001e58 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 020e 	orr.w	r2, r2, #14
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e00f      	b.n	8001cea <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 020a 	orr.w	r2, r2, #10
 8001cd8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0204 	bic.w	r2, r2, #4
 8001ce8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e005      	b.n	8001d08 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
 8001d06:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2204      	movs	r2, #4
 8001d30:	409a      	lsls	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d024      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x72>
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01f      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d107      	bne.n	8001d62 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0204 	bic.w	r2, r2, #4
 8001d60:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d06a      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d82:	e065      	b.n	8001e50 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	2202      	movs	r2, #2
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d02c      	beq.n	8001dee <HAL_DMA_IRQHandler+0xdc>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d027      	beq.n	8001dee <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10b      	bne.n	8001dc4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 020a 	bic.w	r2, r2, #10
 8001dba:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	2102      	movs	r1, #2
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d035      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001dec:	e030      	b.n	8001e50 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	2208      	movs	r2, #8
 8001df4:	409a      	lsls	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d028      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x13e>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d023      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 020e 	bic.w	r2, r2, #14
 8001e16:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f202 	lsl.w	r2, r1, r2
 8001e26:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d004      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	4798      	blx	r3
    }
  }
}  
 8001e4e:	e7ff      	b.n	8001e50 <HAL_DMA_IRQHandler+0x13e>
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	2101      	movs	r1, #1
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d108      	bne.n	8001e98 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e96:	e007      	b.n	8001ea8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	60da      	str	r2, [r3, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <DMA_CalcBaseAndBitshift+0x34>)
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <DMA_CalcBaseAndBitshift+0x38>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	009a      	lsls	r2, r3, #2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <DMA_CalcBaseAndBitshift+0x3c>)
 8001ed8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	bffdfff8 	.word	0xbffdfff8
 8001eec:	cccccccd 	.word	0xcccccccd
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	e14e      	b.n	80021a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8140 	beq.w	800219c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d00b      	beq.n	8001f3c <HAL_GPIO_Init+0x48>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d007      	beq.n	8001f3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f30:	2b11      	cmp	r3, #17
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b12      	cmp	r3, #18
 8001f3a:	d130      	bne.n	8001f9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f72:	2201      	movs	r2, #1
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	091b      	lsrs	r3, r3, #4
 8001f88:	f003 0201 	and.w	r2, r3, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0xea>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b12      	cmp	r3, #18
 8001fdc:	d123      	bne.n	8002026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	6939      	ldr	r1, [r7, #16]
 8002022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0203 	and.w	r2, r3, #3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 809a 	beq.w	800219c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002068:	4b55      	ldr	r3, [pc, #340]	; (80021c0 <HAL_GPIO_Init+0x2cc>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a54      	ldr	r2, [pc, #336]	; (80021c0 <HAL_GPIO_Init+0x2cc>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b52      	ldr	r3, [pc, #328]	; (80021c0 <HAL_GPIO_Init+0x2cc>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002080:	4a50      	ldr	r2, [pc, #320]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020aa:	d013      	beq.n	80020d4 <HAL_GPIO_Init+0x1e0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a46      	ldr	r2, [pc, #280]	; (80021c8 <HAL_GPIO_Init+0x2d4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00d      	beq.n	80020d0 <HAL_GPIO_Init+0x1dc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a45      	ldr	r2, [pc, #276]	; (80021cc <HAL_GPIO_Init+0x2d8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d007      	beq.n	80020cc <HAL_GPIO_Init+0x1d8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a44      	ldr	r2, [pc, #272]	; (80021d0 <HAL_GPIO_Init+0x2dc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_GPIO_Init+0x1d4>
 80020c4:	2303      	movs	r3, #3
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_Init+0x1e2>
 80020c8:	2305      	movs	r3, #5
 80020ca:	e004      	b.n	80020d6 <HAL_GPIO_Init+0x1e2>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e002      	b.n	80020d6 <HAL_GPIO_Init+0x1e2>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_GPIO_Init+0x1e2>
 80020d4:	2300      	movs	r3, #0
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	f002 0203 	and.w	r2, r2, #3
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4093      	lsls	r3, r2
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020e6:	4937      	ldr	r1, [pc, #220]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f4:	4b37      	ldr	r3, [pc, #220]	; (80021d4 <HAL_GPIO_Init+0x2e0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002118:	4a2e      	ldr	r2, [pc, #184]	; (80021d4 <HAL_GPIO_Init+0x2e0>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_GPIO_Init+0x2e0>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002142:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <HAL_GPIO_Init+0x2e0>)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_GPIO_Init+0x2e0>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800216c:	4a19      	ldr	r2, [pc, #100]	; (80021d4 <HAL_GPIO_Init+0x2e0>)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x2e0>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002196:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_GPIO_Init+0x2e0>)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f aea9 	bne.w	8001f04 <HAL_GPIO_Init+0x10>
  }
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010000 	.word	0x40010000
 80021c8:	48000400 	.word	0x48000400
 80021cc:	48000800 	.word	0x48000800
 80021d0:	48000c00 	.word	0x48000c00
 80021d4:	40010400 	.word	0x40010400

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800220e:	af00      	add	r7, sp, #0
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	f000 bef4 	b.w	800300a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 816a 	beq.w	8002506 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002232:	4bb3      	ldr	r3, [pc, #716]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d00c      	beq.n	8002258 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800223e:	4bb0      	ldr	r3, [pc, #704]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d159      	bne.n	80022fe <HAL_RCC_OscConfig+0xf6>
 800224a:	4bad      	ldr	r3, [pc, #692]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d152      	bne.n	80022fe <HAL_RCC_OscConfig+0xf6>
 8002258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800226c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d102      	bne.n	800228a <HAL_RCC_OscConfig+0x82>
 8002284:	4b9e      	ldr	r3, [pc, #632]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	e015      	b.n	80022b6 <HAL_RCC_OscConfig+0xae>
 800228a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800229e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022a6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022b2:	4b93      	ldr	r3, [pc, #588]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ba:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022be:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022ca:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022ce:	fab2 f282 	clz	r2, r2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f042 0220 	orr.w	r2, r2, #32
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f002 021f 	and.w	r2, r2, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 810c 	beq.w	8002504 <HAL_RCC_OscConfig+0x2fc>
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 8106 	bne.w	8002504 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f000 be86 	b.w	800300a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x110>
 800230a:	4b7d      	ldr	r3, [pc, #500]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7c      	ldr	r2, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e030      	b.n	800237a <HAL_RCC_OscConfig+0x172>
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x134>
 8002322:	4b77      	ldr	r3, [pc, #476]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a76      	ldr	r2, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b74      	ldr	r3, [pc, #464]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a73      	ldr	r2, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e01e      	b.n	800237a <HAL_RCC_OscConfig+0x172>
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002346:	d10c      	bne.n	8002362 <HAL_RCC_OscConfig+0x15a>
 8002348:	4b6d      	ldr	r3, [pc, #436]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6c      	ldr	r2, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 800234e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a69      	ldr	r2, [pc, #420]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 800235a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	e00b      	b.n	800237a <HAL_RCC_OscConfig+0x172>
 8002362:	4b67      	ldr	r3, [pc, #412]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a66      	ldr	r2, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b64      	ldr	r3, [pc, #400]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a63      	ldr	r2, [pc, #396]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800237a:	4b61      	ldr	r3, [pc, #388]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	f023 020f 	bic.w	r2, r3, #15
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	495d      	ldr	r1, [pc, #372]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 800238a:	4313      	orrs	r3, r2
 800238c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d059      	beq.n	800244c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe fbc2 	bl	8000b20 <HAL_GetTick>
 800239c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a2:	f7fe fbbd 	bl	8000b20 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d902      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	f000 be29 	b.w	800300a <HAL_RCC_OscConfig+0xe02>
 80023b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023cc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d102      	bne.n	80023ea <HAL_RCC_OscConfig+0x1e2>
 80023e4:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x20e>
 80023ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002402:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002406:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800241a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800241e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002422:	fa92 f2a2 	rbit	r2, r2
 8002426:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800242a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800242e:	fab2 f282 	clz	r2, r2
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	f042 0220 	orr.w	r2, r2, #32
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f002 021f 	and.w	r2, r2, #31
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f202 	lsl.w	r2, r1, r2
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0ab      	beq.n	80023a2 <HAL_RCC_OscConfig+0x19a>
 800244a:	e05c      	b.n	8002506 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe fb68 	bl	8000b20 <HAL_GetTick>
 8002450:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002456:	f7fe fb63 	bl	8000b20 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d902      	bls.n	800246c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	f000 bdcf 	b.w	800300a <HAL_RCC_OscConfig+0xe02>
 800246c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002470:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002480:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d102      	bne.n	800249e <HAL_RCC_OscConfig+0x296>
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x2c2>
 800249e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024ba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_RCC_OscConfig+0x2f8>)
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024d6:	fa92 f2a2 	rbit	r2, r2
 80024da:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80024de:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024e2:	fab2 f282 	clz	r2, r2
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f042 0220 	orr.w	r2, r2, #32
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f002 021f 	and.w	r2, r2, #31
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f202 	lsl.w	r2, r1, r2
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ab      	bne.n	8002456 <HAL_RCC_OscConfig+0x24e>
 80024fe:	e002      	b.n	8002506 <HAL_RCC_OscConfig+0x2fe>
 8002500:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 816f 	beq.w	80027f4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002516:	4bd0      	ldr	r3, [pc, #832]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002522:	4bcd      	ldr	r3, [pc, #820]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d16c      	bne.n	8002608 <HAL_RCC_OscConfig+0x400>
 800252e:	4bca      	ldr	r3, [pc, #808]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d166      	bne.n	8002608 <HAL_RCC_OscConfig+0x400>
 800253a:	2302      	movs	r3, #2
 800253c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800254c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d102      	bne.n	800256a <HAL_RCC_OscConfig+0x362>
 8002564:	4bbc      	ldr	r3, [pc, #752]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	e013      	b.n	8002592 <HAL_RCC_OscConfig+0x38a>
 800256a:	2302      	movs	r3, #2
 800256c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800257c:	2302      	movs	r3, #2
 800257e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002582:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800258e:	4bb2      	ldr	r3, [pc, #712]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	2202      	movs	r2, #2
 8002594:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002598:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800259c:	fa92 f2a2 	rbit	r2, r2
 80025a0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025a4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_RCC_OscConfig+0x3cc>
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d002      	beq.n	80025d4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f000 bd1b 	b.w	800300a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d4:	4ba0      	ldr	r3, [pc, #640]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	21f8      	movs	r1, #248	; 0xf8
 80025e4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025ec:	fa91 f1a1 	rbit	r1, r1
 80025f0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80025f4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80025f8:	fab1 f181 	clz	r1, r1
 80025fc:	b2c9      	uxtb	r1, r1
 80025fe:	408b      	lsls	r3, r1
 8002600:	4995      	ldr	r1, [pc, #596]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e0f5      	b.n	80027f4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8085 	beq.w	800271e <HAL_RCC_OscConfig+0x516>
 8002614:	2301      	movs	r3, #1
 8002616:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002626:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002634:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	461a      	mov	r2, r3
 800263c:	2301      	movs	r3, #1
 800263e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe fa6e 	bl	8000b20 <HAL_GetTick>
 8002644:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264a:	f7fe fa69 	bl	8000b20 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	f000 bcd5 	b.w	800300a <HAL_RCC_OscConfig+0xe02>
 8002660:	2302      	movs	r3, #2
 8002662:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002672:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d102      	bne.n	8002690 <HAL_RCC_OscConfig+0x488>
 800268a:	4b73      	ldr	r3, [pc, #460]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e013      	b.n	80026b8 <HAL_RCC_OscConfig+0x4b0>
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026a2:	2302      	movs	r3, #2
 80026a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026b4:	4b68      	ldr	r3, [pc, #416]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2202      	movs	r2, #2
 80026ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026c2:	fa92 f2a2 	rbit	r2, r2
 80026c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80026ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026ce:	fab2 f282 	clz	r2, r2
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f042 0220 	orr.w	r2, r2, #32
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f002 021f 	and.w	r2, r2, #31
 80026de:	2101      	movs	r1, #1
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0af      	beq.n	800264a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	21f8      	movs	r1, #248	; 0xf8
 80026fa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002702:	fa91 f1a1 	rbit	r1, r1
 8002706:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800270a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800270e:	fab1 f181 	clz	r1, r1
 8002712:	b2c9      	uxtb	r1, r1
 8002714:	408b      	lsls	r3, r1
 8002716:	4950      	ldr	r1, [pc, #320]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]
 800271c:	e06a      	b.n	80027f4 <HAL_RCC_OscConfig+0x5ec>
 800271e:	2301      	movs	r3, #1
 8002720:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002730:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800273e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	461a      	mov	r2, r3
 8002746:	2300      	movs	r3, #0
 8002748:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe f9e9 	bl	8000b20 <HAL_GetTick>
 800274e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002754:	f7fe f9e4 	bl	8000b20 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d902      	bls.n	800276a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	f000 bc50 	b.w	800300a <HAL_RCC_OscConfig+0xe02>
 800276a:	2302      	movs	r3, #2
 800276c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800277c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d102      	bne.n	800279a <HAL_RCC_OscConfig+0x592>
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	e013      	b.n	80027c2 <HAL_RCC_OscConfig+0x5ba>
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027ac:	2302      	movs	r3, #2
 80027ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_RCC_OscConfig+0x650>)
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	2202      	movs	r2, #2
 80027c4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027cc:	fa92 f2a2 	rbit	r2, r2
 80027d0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80027d4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027d8:	fab2 f282 	clz	r2, r2
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	f042 0220 	orr.w	r2, r2, #32
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f002 021f 	and.w	r2, r2, #31
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1af      	bne.n	8002754 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80da 	beq.w	80029b8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d069      	beq.n	80028e2 <HAL_RCC_OscConfig+0x6da>
 800280e:	2301      	movs	r3, #1
 8002810:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x654>)
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	461a      	mov	r2, r3
 8002834:	2301      	movs	r3, #1
 8002836:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7fe f972 	bl	8000b20 <HAL_GetTick>
 800283c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002840:	e00e      	b.n	8002860 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002842:	f7fe f96d 	bl	8000b20 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d906      	bls.n	8002860 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e3d9      	b.n	800300a <HAL_RCC_OscConfig+0xe02>
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	10908120 	.word	0x10908120
 8002860:	2302      	movs	r3, #2
 8002862:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002872:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002876:	2202      	movs	r2, #2
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fa93 f2a3 	rbit	r2, r3
 8002884:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800288e:	2202      	movs	r2, #2
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	fa93 f2a3 	rbit	r2, r3
 800289c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	4ba5      	ldr	r3, [pc, #660]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 80028a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028aa:	2102      	movs	r1, #2
 80028ac:	6019      	str	r1, [r3, #0]
 80028ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fa93 f1a3 	rbit	r1, r3
 80028b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028bc:	6019      	str	r1, [r3, #0]
  return result;
 80028be:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2101      	movs	r1, #1
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0b0      	beq.n	8002842 <HAL_RCC_OscConfig+0x63a>
 80028e0:	e06a      	b.n	80029b8 <HAL_RCC_OscConfig+0x7b0>
 80028e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028f8:	601a      	str	r2, [r3, #0]
  return result;
 80028fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028fe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	4b8c      	ldr	r3, [pc, #560]	; (8002b3c <HAL_RCC_OscConfig+0x934>)
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	461a      	mov	r2, r3
 8002910:	2300      	movs	r3, #0
 8002912:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002914:	f7fe f904 	bl	8000b20 <HAL_GetTick>
 8002918:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	e009      	b.n	8002932 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291e:	f7fe f8ff 	bl	8000b20 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e36b      	b.n	800300a <HAL_RCC_OscConfig+0xe02>
 8002932:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002936:	2202      	movs	r2, #2
 8002938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fa93 f2a3 	rbit	r2, r3
 8002944:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800294e:	2202      	movs	r2, #2
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	fa93 f2a3 	rbit	r2, r3
 800295c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002966:	2202      	movs	r2, #2
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002978:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297a:	4b6f      	ldr	r3, [pc, #444]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 800297c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800297e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002982:	2102      	movs	r1, #2
 8002984:	6019      	str	r1, [r3, #0]
 8002986:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f1a3 	rbit	r1, r3
 8002990:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002994:	6019      	str	r1, [r3, #0]
  return result;
 8002996:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1b2      	bne.n	800291e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8158 	beq.w	8002c78 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ce:	4b5a      	ldr	r3, [pc, #360]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d112      	bne.n	8002a00 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4a56      	ldr	r2, [pc, #344]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	61d3      	str	r3, [r2, #28]
 80029e6:	4b54      	ldr	r3, [pc, #336]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f107 0308 	add.w	r3, r7, #8
 80029f8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	4b4f      	ldr	r3, [pc, #316]	; (8002b40 <HAL_RCC_OscConfig+0x938>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11a      	bne.n	8002a42 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0c:	4b4c      	ldr	r3, [pc, #304]	; (8002b40 <HAL_RCC_OscConfig+0x938>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a4b      	ldr	r2, [pc, #300]	; (8002b40 <HAL_RCC_OscConfig+0x938>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a18:	f7fe f882 	bl	8000b20 <HAL_GetTick>
 8002a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e009      	b.n	8002a36 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe f87d 	bl	8000b20 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	; 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e2e9      	b.n	800300a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <HAL_RCC_OscConfig+0x938>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ef      	beq.n	8002a22 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x852>
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a39      	ldr	r2, [pc, #228]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6213      	str	r3, [r2, #32]
 8002a58:	e02f      	b.n	8002aba <HAL_RCC_OscConfig+0x8b2>
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10c      	bne.n	8002a7e <HAL_RCC_OscConfig+0x876>
 8002a64:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a33      	ldr	r2, [pc, #204]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6213      	str	r3, [r2, #32]
 8002a70:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4a30      	ldr	r2, [pc, #192]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002a76:	f023 0304 	bic.w	r3, r3, #4
 8002a7a:	6213      	str	r3, [r2, #32]
 8002a7c:	e01d      	b.n	8002aba <HAL_RCC_OscConfig+0x8b2>
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x89a>
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4a27      	ldr	r2, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6213      	str	r3, [r2, #32]
 8002aa0:	e00b      	b.n	8002aba <HAL_RCC_OscConfig+0x8b2>
 8002aa2:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6213      	str	r3, [r2, #32]
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d06b      	beq.n	8002b9c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac4:	f7fe f82c 	bl	8000b20 <HAL_GetTick>
 8002ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	e00b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe f827 	bl	8000b20 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e291      	b.n	800300a <HAL_RCC_OscConfig+0xe02>
 8002ae6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002aea:	2202      	movs	r2, #2
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b02:	2202      	movs	r2, #2
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	fa93 f2a3 	rbit	r2, r3
 8002b10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b14:	601a      	str	r2, [r3, #0]
  return result;
 8002b16:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d109      	bne.n	8002b44 <HAL_RCC_OscConfig+0x93c>
 8002b30:	4b01      	ldr	r3, [pc, #4]	; (8002b38 <HAL_RCC_OscConfig+0x930>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	e014      	b.n	8002b60 <HAL_RCC_OscConfig+0x958>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	10908120 	.word	0x10908120
 8002b40:	40007000 	.word	0x40007000
 8002b44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b48:	2202      	movs	r2, #2
 8002b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	fa93 f2a3 	rbit	r2, r3
 8002b56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	4bbb      	ldr	r3, [pc, #748]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b64:	2102      	movs	r1, #2
 8002b66:	6011      	str	r1, [r2, #0]
 8002b68:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	fa92 f1a2 	rbit	r1, r2
 8002b72:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002b76:	6011      	str	r1, [r2, #0]
  return result;
 8002b78:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	f002 021f 	and.w	r2, r2, #31
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d099      	beq.n	8002ace <HAL_RCC_OscConfig+0x8c6>
 8002b9a:	e063      	b.n	8002c64 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9c:	f7fd ffc0 	bl	8000b20 <HAL_GetTick>
 8002ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba4:	e00b      	b.n	8002bbe <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fd ffbb 	bl	8000b20 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e225      	b.n	800300a <HAL_RCC_OscConfig+0xe02>
 8002bbe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002bda:	2202      	movs	r2, #2
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	fa93 f2a3 	rbit	r2, r3
 8002be8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bec:	601a      	str	r2, [r3, #0]
  return result;
 8002bee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bf2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_OscConfig+0xa06>
 8002c08:	4b90      	ldr	r3, [pc, #576]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	e00d      	b.n	8002c2a <HAL_RCC_OscConfig+0xa22>
 8002c0e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c12:	2202      	movs	r2, #2
 8002c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	fa93 f2a3 	rbit	r2, r3
 8002c20:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	4b89      	ldr	r3, [pc, #548]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c2e:	2102      	movs	r1, #2
 8002c30:	6011      	str	r1, [r2, #0]
 8002c32:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	fa92 f1a2 	rbit	r1, r2
 8002c3c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c40:	6011      	str	r1, [r2, #0]
  return result;
 8002c42:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	fab2 f282 	clz	r2, r2
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	f002 021f 	and.w	r2, r2, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1a0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c64:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6c:	4b77      	ldr	r3, [pc, #476]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	4a76      	ldr	r2, [pc, #472]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c76:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 81c2 	beq.w	8003008 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c84:	4b71      	ldr	r3, [pc, #452]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	f000 819c 	beq.w	8002fca <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	f040 8114 	bne.w	8002ec6 <HAL_RCC_OscConfig+0xcbe>
 8002c9e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ca2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	fa93 f2a3 	rbit	r2, r3
 8002cb2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cb6:	601a      	str	r2, [r3, #0]
  return result;
 8002cb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cbc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fd ff24 	bl	8000b20 <HAL_GetTick>
 8002cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cdc:	e009      	b.n	8002cf2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cde:	f7fd ff1f 	bl	8000b20 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e18b      	b.n	800300a <HAL_RCC_OscConfig+0xe02>
 8002cf2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d0a:	601a      	str	r2, [r3, #0]
  return result;
 8002d0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d102      	bne.n	8002d2c <HAL_RCC_OscConfig+0xb24>
 8002d26:	4b49      	ldr	r3, [pc, #292]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	e01b      	b.n	8002d64 <HAL_RCC_OscConfig+0xb5c>
 8002d2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	fa93 f2a3 	rbit	r2, r3
 8002d40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d6c:	6011      	str	r1, [r2, #0]
 8002d6e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	fa92 f1a2 	rbit	r1, r2
 8002d78:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002d7c:	6011      	str	r1, [r2, #0]
  return result;
 8002d7e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f002 021f 	and.w	r2, r2, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d19e      	bne.n	8002cde <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da0:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002da8:	1d3b      	adds	r3, r7, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	4925      	ldr	r1, [pc, #148]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
 8002dbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dd4:	601a      	str	r2, [r3, #0]
  return result;
 8002dd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dda:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	461a      	mov	r2, r3
 8002dee:	2301      	movs	r3, #1
 8002df0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fd fe95 	bl	8000b20 <HAL_GetTick>
 8002df6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfa:	e009      	b.n	8002e10 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fd fe90 	bl	8000b20 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0fc      	b.n	800300a <HAL_RCC_OscConfig+0xe02>
 8002e10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e28:	601a      	str	r2, [r3, #0]
  return result;
 8002e2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_RCC_OscConfig+0xc48>
 8002e44:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <HAL_RCC_OscConfig+0xc44>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	e01e      	b.n	8002e88 <HAL_RCC_OscConfig+0xc80>
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	fa93 f2a3 	rbit	r2, r3
 8002e64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_OscConfig+0xe0c>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e90:	6011      	str	r1, [r2, #0]
 8002e92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	fa92 f1a2 	rbit	r1, r2
 8002e9c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ea0:	6011      	str	r1, [r2, #0]
  return result;
 8002ea2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	fab2 f282 	clz	r2, r2
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	f042 0220 	orr.w	r2, r2, #32
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	f002 021f 	and.w	r2, r2, #31
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d09b      	beq.n	8002dfc <HAL_RCC_OscConfig+0xbf4>
 8002ec4:	e0a0      	b.n	8003008 <HAL_RCC_OscConfig+0xe00>
 8002ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	fa93 f2a3 	rbit	r2, r3
 8002eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ede:	601a      	str	r2, [r3, #0]
  return result;
 8002ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ef0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2300      	movs	r3, #0
 8002efa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fd fe10 	bl	8000b20 <HAL_GetTick>
 8002f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f04:	e009      	b.n	8002f1a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f06:	f7fd fe0b 	bl	8000b20 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e077      	b.n	800300a <HAL_RCC_OscConfig+0xe02>
 8002f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	fa93 f2a3 	rbit	r2, r3
 8002f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f32:	601a      	str	r2, [r3, #0]
  return result;
 8002f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d102      	bne.n	8002f54 <HAL_RCC_OscConfig+0xd4c>
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <HAL_RCC_OscConfig+0xe0c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	e01b      	b.n	8002f8c <HAL_RCC_OscConfig+0xd84>
 8002f54:	f107 0320 	add.w	r3, r7, #32
 8002f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f107 0320 	add.w	r3, r7, #32
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	f107 0318 	add.w	r3, r7, #24
 8002f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f107 0318 	add.w	r3, r7, #24
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	fa93 f2a3 	rbit	r2, r3
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	4b22      	ldr	r3, [pc, #136]	; (8003014 <HAL_RCC_OscConfig+0xe0c>)
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f107 0210 	add.w	r2, r7, #16
 8002f90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f94:	6011      	str	r1, [r2, #0]
 8002f96:	f107 0210 	add.w	r2, r7, #16
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	fa92 f1a2 	rbit	r1, r2
 8002fa0:	f107 020c 	add.w	r2, r7, #12
 8002fa4:	6011      	str	r1, [r2, #0]
  return result;
 8002fa6:	f107 020c 	add.w	r2, r7, #12
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	fab2 f282 	clz	r2, r2
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f042 0220 	orr.w	r2, r2, #32
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	f002 021f 	and.w	r2, r2, #31
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d19e      	bne.n	8002f06 <HAL_RCC_OscConfig+0xcfe>
 8002fc8:	e01e      	b.n	8003008 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fca:	1d3b      	adds	r3, r7, #4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e018      	b.n	800300a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_RCC_OscConfig+0xe0c>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fe0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fe4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d108      	bne.n	8003004 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ff2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ff6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000

08003018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b09e      	sub	sp, #120	; 0x78
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e162      	b.n	80032f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003030:	4b90      	ldr	r3, [pc, #576]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d910      	bls.n	8003060 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b8d      	ldr	r3, [pc, #564]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 0207 	bic.w	r2, r3, #7
 8003046:	498b      	ldr	r1, [pc, #556]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b89      	ldr	r3, [pc, #548]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e14a      	b.n	80032f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b82      	ldr	r3, [pc, #520]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	497f      	ldr	r1, [pc, #508]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80dc 	beq.w	8003244 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d13c      	bne.n	800310e <HAL_RCC_ClockConfig+0xf6>
 8003094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003098:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d102      	bne.n	80030be <HAL_RCC_ClockConfig+0xa6>
 80030b8:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	e00f      	b.n	80030de <HAL_RCC_ClockConfig+0xc6>
 80030be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	667b      	str	r3, [r7, #100]	; 0x64
 80030cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d0:	663b      	str	r3, [r7, #96]	; 0x60
 80030d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80030e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030e6:	fa92 f2a2 	rbit	r2, r2
 80030ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030ee:	fab2 f282 	clz	r2, r2
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	f042 0220 	orr.w	r2, r2, #32
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f002 021f 	and.w	r2, r2, #31
 80030fe:	2101      	movs	r1, #1
 8003100:	fa01 f202 	lsl.w	r2, r1, r2
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d17b      	bne.n	8003202 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0f3      	b.n	80032f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d13c      	bne.n	8003190 <HAL_RCC_ClockConfig+0x178>
 8003116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800311a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d102      	bne.n	8003140 <HAL_RCC_ClockConfig+0x128>
 800313a:	4b4f      	ldr	r3, [pc, #316]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	e00f      	b.n	8003160 <HAL_RCC_ClockConfig+0x148>
 8003140:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003144:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	647b      	str	r3, [r7, #68]	; 0x44
 800314e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003152:	643b      	str	r3, [r7, #64]	; 0x40
 8003154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315c:	4b46      	ldr	r3, [pc, #280]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003164:	63ba      	str	r2, [r7, #56]	; 0x38
 8003166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003168:	fa92 f2a2 	rbit	r2, r2
 800316c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800316e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003170:	fab2 f282 	clz	r2, r2
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	f042 0220 	orr.w	r2, r2, #32
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	f002 021f 	and.w	r2, r2, #31
 8003180:	2101      	movs	r1, #1
 8003182:	fa01 f202 	lsl.w	r2, r1, r2
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d13a      	bne.n	8003202 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0b2      	b.n	80032f6 <HAL_RCC_ClockConfig+0x2de>
 8003190:	2302      	movs	r3, #2
 8003192:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d102      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x1a0>
 80031b2:	4b31      	ldr	r3, [pc, #196]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	e00d      	b.n	80031d4 <HAL_RCC_ClockConfig+0x1bc>
 80031b8:	2302      	movs	r3, #2
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	2302      	movs	r3, #2
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	4b29      	ldr	r3, [pc, #164]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	2202      	movs	r2, #2
 80031d6:	61ba      	str	r2, [r7, #24]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	fa92 f2a2 	rbit	r2, r2
 80031de:	617a      	str	r2, [r7, #20]
  return result;
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	fab2 f282 	clz	r2, r2
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f042 0220 	orr.w	r2, r2, #32
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f002 021f 	and.w	r2, r2, #31
 80031f2:	2101      	movs	r1, #1
 80031f4:	fa01 f202 	lsl.w	r2, r1, r2
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e079      	b.n	80032f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	491a      	ldr	r1, [pc, #104]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003214:	f7fd fc84 	bl	8000b20 <HAL_GetTick>
 8003218:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7fd fc80 	bl	8000b20 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e061      	b.n	80032f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d214      	bcs.n	800327c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 0207 	bic.w	r2, r3, #7
 800325a:	4906      	ldr	r1, [pc, #24]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <HAL_RCC_ClockConfig+0x25c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e040      	b.n	80032f6 <HAL_RCC_ClockConfig+0x2de>
 8003274:	40022000 	.word	0x40022000
 8003278:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_RCC_ClockConfig+0x2e8>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	491a      	ldr	r1, [pc, #104]	; (8003300 <HAL_RCC_ClockConfig+0x2e8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a6:	4b16      	ldr	r3, [pc, #88]	; (8003300 <HAL_RCC_ClockConfig+0x2e8>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4912      	ldr	r1, [pc, #72]	; (8003300 <HAL_RCC_ClockConfig+0x2e8>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032ba:	f000 f829 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80032be:	4601      	mov	r1, r0
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_RCC_ClockConfig+0x2e8>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c8:	22f0      	movs	r2, #240	; 0xf0
 80032ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	fa92 f2a2 	rbit	r2, r2
 80032d2:	60fa      	str	r2, [r7, #12]
  return result;
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	fab2 f282 	clz	r2, r2
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	40d3      	lsrs	r3, r2
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x2ec>)
 80032e0:	5cd3      	ldrb	r3, [r2, r3]
 80032e2:	fa21 f303 	lsr.w	r3, r1, r3
 80032e6:	4a08      	ldr	r2, [pc, #32]	; (8003308 <HAL_RCC_ClockConfig+0x2f0>)
 80032e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <HAL_RCC_ClockConfig+0x2f4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd fbd2 	bl	8000a98 <HAL_InitTick>
  
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3778      	adds	r7, #120	; 0x78
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	080043c8 	.word	0x080043c8
 8003308:	20000000 	.word	0x20000000
 800330c:	20000004 	.word	0x20000004

08003310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003310:	b480      	push	{r7}
 8003312:	b08b      	sub	sp, #44	; 0x2c
 8003314:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b04      	cmp	r3, #4
 8003338:	d002      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x30>
 800333a:	2b08      	cmp	r3, #8
 800333c:	d003      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x36>
 800333e:	e03c      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003342:	623b      	str	r3, [r7, #32]
      break;
 8003344:	e03c      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800334c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003350:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	fa92 f2a2 	rbit	r2, r2
 8003358:	607a      	str	r2, [r7, #4]
  return result;
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	40d3      	lsrs	r3, r2
 8003364:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003366:	5cd3      	ldrb	r3, [r2, r3]
 8003368:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800336a:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	220f      	movs	r2, #15
 8003374:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	fa92 f2a2 	rbit	r2, r2
 800337c:	60fa      	str	r2, [r7, #12]
  return result;
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	fab2 f282 	clz	r2, r2
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	40d3      	lsrs	r3, r2
 8003388:	4a14      	ldr	r2, [pc, #80]	; (80033dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003398:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	e004      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	623b      	str	r3, [r7, #32]
      break;
 80033b8:	e002      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033bc:	623b      	str	r3, [r7, #32]
      break;
 80033be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c0:	6a3b      	ldr	r3, [r7, #32]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	372c      	adds	r7, #44	; 0x2c
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	007a1200 	.word	0x007a1200
 80033d8:	080043d8 	.word	0x080043d8
 80033dc:	080043e8 	.word	0x080043e8
 80033e0:	003d0900 	.word	0x003d0900

080033e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e049      	b.n	800348a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fa5a 	bl	80008c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3304      	adds	r3, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f000 fb4c 	bl	8003ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e049      	b.n	8003538 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d106      	bne.n	80034be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f841 	bl	8003540 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f000 faf5 	bl	8003ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <HAL_TIM_PWM_Start+0x24>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e03c      	b.n	80035f2 <HAL_TIM_PWM_Start+0x9e>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b04      	cmp	r3, #4
 800357c:	d109      	bne.n	8003592 <HAL_TIM_PWM_Start+0x3e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	bf14      	ite	ne
 800358a:	2301      	movne	r3, #1
 800358c:	2300      	moveq	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e02f      	b.n	80035f2 <HAL_TIM_PWM_Start+0x9e>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b08      	cmp	r3, #8
 8003596:	d109      	bne.n	80035ac <HAL_TIM_PWM_Start+0x58>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	e022      	b.n	80035f2 <HAL_TIM_PWM_Start+0x9e>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b0c      	cmp	r3, #12
 80035b0:	d109      	bne.n	80035c6 <HAL_TIM_PWM_Start+0x72>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e015      	b.n	80035f2 <HAL_TIM_PWM_Start+0x9e>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d109      	bne.n	80035e0 <HAL_TIM_PWM_Start+0x8c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e008      	b.n	80035f2 <HAL_TIM_PWM_Start+0x9e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e088      	b.n	800370c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d104      	bne.n	800360a <HAL_TIM_PWM_Start+0xb6>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003608:	e023      	b.n	8003652 <HAL_TIM_PWM_Start+0xfe>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b04      	cmp	r3, #4
 800360e:	d104      	bne.n	800361a <HAL_TIM_PWM_Start+0xc6>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003618:	e01b      	b.n	8003652 <HAL_TIM_PWM_Start+0xfe>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d104      	bne.n	800362a <HAL_TIM_PWM_Start+0xd6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003628:	e013      	b.n	8003652 <HAL_TIM_PWM_Start+0xfe>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b0c      	cmp	r3, #12
 800362e:	d104      	bne.n	800363a <HAL_TIM_PWM_Start+0xe6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003638:	e00b      	b.n	8003652 <HAL_TIM_PWM_Start+0xfe>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b10      	cmp	r3, #16
 800363e:	d104      	bne.n	800364a <HAL_TIM_PWM_Start+0xf6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003648:	e003      	b.n	8003652 <HAL_TIM_PWM_Start+0xfe>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2201      	movs	r2, #1
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fde8 	bl	8004230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2b      	ldr	r2, [pc, #172]	; (8003714 <HAL_TIM_PWM_Start+0x1c0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00e      	beq.n	8003688 <HAL_TIM_PWM_Start+0x134>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2a      	ldr	r2, [pc, #168]	; (8003718 <HAL_TIM_PWM_Start+0x1c4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d009      	beq.n	8003688 <HAL_TIM_PWM_Start+0x134>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a28      	ldr	r2, [pc, #160]	; (800371c <HAL_TIM_PWM_Start+0x1c8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_TIM_PWM_Start+0x134>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a27      	ldr	r2, [pc, #156]	; (8003720 <HAL_TIM_PWM_Start+0x1cc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d101      	bne.n	800368c <HAL_TIM_PWM_Start+0x138>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_TIM_PWM_Start+0x13a>
 800368c:	2300      	movs	r3, #0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d007      	beq.n	80036a2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_TIM_PWM_Start+0x1c0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00e      	beq.n	80036ca <HAL_TIM_PWM_Start+0x176>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b4:	d009      	beq.n	80036ca <HAL_TIM_PWM_Start+0x176>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <HAL_TIM_PWM_Start+0x1d0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_TIM_PWM_Start+0x176>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a14      	ldr	r2, [pc, #80]	; (8003718 <HAL_TIM_PWM_Start+0x1c4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d115      	bne.n	80036f6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <HAL_TIM_PWM_Start+0x1d4>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b06      	cmp	r3, #6
 80036da:	d015      	beq.n	8003708 <HAL_TIM_PWM_Start+0x1b4>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e2:	d011      	beq.n	8003708 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	e008      	b.n	8003708 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e000      	b.n	800370a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003708:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40014000 	.word	0x40014000
 800371c:	40014400 	.word	0x40014400
 8003720:	40014800 	.word	0x40014800
 8003724:	40000400 	.word	0x40000400
 8003728:	00010007 	.word	0x00010007

0800372c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003742:	2302      	movs	r3, #2
 8003744:	e0fd      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b14      	cmp	r3, #20
 8003752:	f200 80f0 	bhi.w	8003936 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003756:	a201      	add	r2, pc, #4	; (adr r2, 800375c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	080037b1 	.word	0x080037b1
 8003760:	08003937 	.word	0x08003937
 8003764:	08003937 	.word	0x08003937
 8003768:	08003937 	.word	0x08003937
 800376c:	080037f1 	.word	0x080037f1
 8003770:	08003937 	.word	0x08003937
 8003774:	08003937 	.word	0x08003937
 8003778:	08003937 	.word	0x08003937
 800377c:	08003833 	.word	0x08003833
 8003780:	08003937 	.word	0x08003937
 8003784:	08003937 	.word	0x08003937
 8003788:	08003937 	.word	0x08003937
 800378c:	08003873 	.word	0x08003873
 8003790:	08003937 	.word	0x08003937
 8003794:	08003937 	.word	0x08003937
 8003798:	08003937 	.word	0x08003937
 800379c:	080038b5 	.word	0x080038b5
 80037a0:	08003937 	.word	0x08003937
 80037a4:	08003937 	.word	0x08003937
 80037a8:	08003937 	.word	0x08003937
 80037ac:	080038f5 	.word	0x080038f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f9fa 	bl	8003bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0208 	orr.w	r2, r2, #8
 80037ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0204 	bic.w	r2, r2, #4
 80037da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6999      	ldr	r1, [r3, #24]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	619a      	str	r2, [r3, #24]
      break;
 80037ee:	e0a3      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fa60 	bl	8003cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800380a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6999      	ldr	r1, [r3, #24]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	021a      	lsls	r2, r3, #8
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	619a      	str	r2, [r3, #24]
      break;
 8003830:	e082      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fabf 	bl	8003dbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0208 	orr.w	r2, r2, #8
 800384c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0204 	bic.w	r2, r2, #4
 800385c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69d9      	ldr	r1, [r3, #28]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	61da      	str	r2, [r3, #28]
      break;
 8003870:	e062      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fb1d 	bl	8003eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800388c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69d9      	ldr	r1, [r3, #28]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	021a      	lsls	r2, r3, #8
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	61da      	str	r2, [r3, #28]
      break;
 80038b2:	e041      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fb60 	bl	8003f80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0208 	orr.w	r2, r2, #8
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0204 	bic.w	r2, r2, #4
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038f2:	e021      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fb9e 	bl	800403c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800390e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	021a      	lsls	r2, r3, #8
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003934:	e000      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003936:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop

0800394c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_TIM_ConfigClockSource+0x18>
 8003960:	2302      	movs	r3, #2
 8003962:	e0a8      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x16a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003986:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d067      	beq.n	8003a70 <HAL_TIM_ConfigClockSource+0x124>
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d80b      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x70>
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d073      	beq.n	8003a90 <HAL_TIM_ConfigClockSource+0x144>
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d802      	bhi.n	80039b2 <HAL_TIM_ConfigClockSource+0x66>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d06f      	beq.n	8003a90 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039b0:	e078      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d06c      	beq.n	8003a90 <HAL_TIM_ConfigClockSource+0x144>
 80039b6:	2b30      	cmp	r3, #48	; 0x30
 80039b8:	d06a      	beq.n	8003a90 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80039ba:	e073      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80039bc:	2b70      	cmp	r3, #112	; 0x70
 80039be:	d00d      	beq.n	80039dc <HAL_TIM_ConfigClockSource+0x90>
 80039c0:	2b70      	cmp	r3, #112	; 0x70
 80039c2:	d804      	bhi.n	80039ce <HAL_TIM_ConfigClockSource+0x82>
 80039c4:	2b50      	cmp	r3, #80	; 0x50
 80039c6:	d033      	beq.n	8003a30 <HAL_TIM_ConfigClockSource+0xe4>
 80039c8:	2b60      	cmp	r3, #96	; 0x60
 80039ca:	d041      	beq.n	8003a50 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80039cc:	e06a      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d066      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x156>
 80039d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d8:	d017      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80039da:	e063      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6899      	ldr	r1, [r3, #8]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f000 fc00 	bl	80041f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	609a      	str	r2, [r3, #8]
      break;
 8003a08:	e04c      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6899      	ldr	r1, [r3, #8]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f000 fbe9 	bl	80041f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a2c:	609a      	str	r2, [r3, #8]
      break;
 8003a2e:	e039      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f000 fb5d 	bl	80040fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2150      	movs	r1, #80	; 0x50
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fbb6 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003a4e:	e029      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f000 fb7c 	bl	800415a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2160      	movs	r1, #96	; 0x60
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fba6 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003a6e:	e019      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f000 fb3d 	bl	80040fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2140      	movs	r1, #64	; 0x40
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fb96 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003a8e:	e009      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 fb8d 	bl	80041ba <TIM_ITRx_SetConfig>
        break;
 8003aa0:	e000      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003aa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a32      	ldr	r2, [pc, #200]	; (8003b9c <TIM_Base_SetConfig+0xdc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_Base_SetConfig+0x28>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0x28>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a2f      	ldr	r2, [pc, #188]	; (8003ba0 <TIM_Base_SetConfig+0xe0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d108      	bne.n	8003afa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a27      	ldr	r2, [pc, #156]	; (8003b9c <TIM_Base_SetConfig+0xdc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <TIM_Base_SetConfig+0x6a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b08:	d00f      	beq.n	8003b2a <TIM_Base_SetConfig+0x6a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a24      	ldr	r2, [pc, #144]	; (8003ba0 <TIM_Base_SetConfig+0xe0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00b      	beq.n	8003b2a <TIM_Base_SetConfig+0x6a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <TIM_Base_SetConfig+0xe4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <TIM_Base_SetConfig+0x6a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <TIM_Base_SetConfig+0xe8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d003      	beq.n	8003b2a <TIM_Base_SetConfig+0x6a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a21      	ldr	r2, [pc, #132]	; (8003bac <TIM_Base_SetConfig+0xec>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d108      	bne.n	8003b3c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <TIM_Base_SetConfig+0xdc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <TIM_Base_SetConfig+0xc0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <TIM_Base_SetConfig+0xe4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_Base_SetConfig+0xc0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <TIM_Base_SetConfig+0xe8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0xc0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <TIM_Base_SetConfig+0xec>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d103      	bne.n	8003b88 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	615a      	str	r2, [r3, #20]
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800

08003bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0201 	bic.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f023 0302 	bic.w	r3, r3, #2
 8003bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a28      	ldr	r2, [pc, #160]	; (8003cac <TIM_OC1_SetConfig+0xfc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <TIM_OC1_SetConfig+0x78>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a27      	ldr	r2, [pc, #156]	; (8003cb0 <TIM_OC1_SetConfig+0x100>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_OC1_SetConfig+0x78>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a26      	ldr	r2, [pc, #152]	; (8003cb4 <TIM_OC1_SetConfig+0x104>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_OC1_SetConfig+0x78>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <TIM_OC1_SetConfig+0x108>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d10c      	bne.n	8003c42 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f023 0308 	bic.w	r3, r3, #8
 8003c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a19      	ldr	r2, [pc, #100]	; (8003cac <TIM_OC1_SetConfig+0xfc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_OC1_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <TIM_OC1_SetConfig+0x100>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_OC1_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <TIM_OC1_SetConfig+0x104>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_OC1_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a16      	ldr	r2, [pc, #88]	; (8003cb8 <TIM_OC1_SetConfig+0x108>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d111      	bne.n	8003c86 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	621a      	str	r2, [r3, #32]
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800

08003cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f023 0210 	bic.w	r2, r3, #16
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 0320 	bic.w	r3, r3, #32
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a24      	ldr	r2, [pc, #144]	; (8003dac <TIM_OC2_SetConfig+0xf0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10d      	bne.n	8003d3c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <TIM_OC2_SetConfig+0xf0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00b      	beq.n	8003d5c <TIM_OC2_SetConfig+0xa0>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <TIM_OC2_SetConfig+0xf4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <TIM_OC2_SetConfig+0xa0>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <TIM_OC2_SetConfig+0xf8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_OC2_SetConfig+0xa0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <TIM_OC2_SetConfig+0xfc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d113      	bne.n	8003d84 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d62:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d6a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40014400 	.word	0x40014400
 8003db8:	40014800 	.word	0x40014800

08003dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0303 	bic.w	r3, r3, #3
 8003df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a23      	ldr	r2, [pc, #140]	; (8003ea8 <TIM_OC3_SetConfig+0xec>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d10d      	bne.n	8003e3a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e38:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <TIM_OC3_SetConfig+0xec>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00b      	beq.n	8003e5a <TIM_OC3_SetConfig+0x9e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <TIM_OC3_SetConfig+0xf0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d007      	beq.n	8003e5a <TIM_OC3_SetConfig+0x9e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <TIM_OC3_SetConfig+0xf4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d003      	beq.n	8003e5a <TIM_OC3_SetConfig+0x9e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <TIM_OC3_SetConfig+0xf8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d113      	bne.n	8003e82 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	621a      	str	r2, [r3, #32]
}
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800

08003eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	031b      	lsls	r3, r3, #12
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <TIM_OC4_SetConfig+0xb8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <TIM_OC4_SetConfig+0x7c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <TIM_OC4_SetConfig+0xbc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <TIM_OC4_SetConfig+0x7c>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <TIM_OC4_SetConfig+0xc0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_OC4_SetConfig+0x7c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <TIM_OC4_SetConfig+0xc4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d109      	bne.n	8003f48 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800

08003f80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a15      	ldr	r2, [pc, #84]	; (800402c <TIM_OC5_SetConfig+0xac>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x72>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a14      	ldr	r2, [pc, #80]	; (8004030 <TIM_OC5_SetConfig+0xb0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x72>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a13      	ldr	r2, [pc, #76]	; (8004034 <TIM_OC5_SetConfig+0xb4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x72>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a12      	ldr	r2, [pc, #72]	; (8004038 <TIM_OC5_SetConfig+0xb8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d109      	bne.n	8004006 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40014000 	.word	0x40014000
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800

0800403c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	051b      	lsls	r3, r3, #20
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <TIM_OC6_SetConfig+0xb0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_OC6_SetConfig+0x74>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <TIM_OC6_SetConfig+0xb4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_OC6_SetConfig+0x74>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a14      	ldr	r2, [pc, #80]	; (80040f4 <TIM_OC6_SetConfig+0xb8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_OC6_SetConfig+0x74>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <TIM_OC6_SetConfig+0xbc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d109      	bne.n	80040c4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	029b      	lsls	r3, r3, #10
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800

080040fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f023 0201 	bic.w	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 030a 	bic.w	r3, r3, #10
 8004138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800415a:	b480      	push	{r7}
 800415c:	b087      	sub	sp, #28
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f023 0210 	bic.w	r2, r3, #16
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	031b      	lsls	r3, r3, #12
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004196:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b085      	sub	sp, #20
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f043 0307 	orr.w	r3, r3, #7
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	609a      	str	r2, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	021a      	lsls	r2, r3, #8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	431a      	orrs	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4313      	orrs	r3, r2
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	609a      	str	r2, [r3, #8]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	2201      	movs	r2, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004290:	2302      	movs	r3, #2
 8004292:	e054      	b.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a24      	ldr	r2, [pc, #144]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a17      	ldr	r2, [pc, #92]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00e      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fc:	d009      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a13      	ldr	r2, [pc, #76]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a11      	ldr	r2, [pc, #68]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10c      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4313      	orrs	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40000400 	.word	0x40000400
 8004354:	40014000 	.word	0x40014000

08004358 <__libc_init_array>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4e0d      	ldr	r6, [pc, #52]	; (8004390 <__libc_init_array+0x38>)
 800435c:	4c0d      	ldr	r4, [pc, #52]	; (8004394 <__libc_init_array+0x3c>)
 800435e:	1ba4      	subs	r4, r4, r6
 8004360:	10a4      	asrs	r4, r4, #2
 8004362:	2500      	movs	r5, #0
 8004364:	42a5      	cmp	r5, r4
 8004366:	d109      	bne.n	800437c <__libc_init_array+0x24>
 8004368:	4e0b      	ldr	r6, [pc, #44]	; (8004398 <__libc_init_array+0x40>)
 800436a:	4c0c      	ldr	r4, [pc, #48]	; (800439c <__libc_init_array+0x44>)
 800436c:	f000 f820 	bl	80043b0 <_init>
 8004370:	1ba4      	subs	r4, r4, r6
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	2500      	movs	r5, #0
 8004376:	42a5      	cmp	r5, r4
 8004378:	d105      	bne.n	8004386 <__libc_init_array+0x2e>
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004380:	4798      	blx	r3
 8004382:	3501      	adds	r5, #1
 8004384:	e7ee      	b.n	8004364 <__libc_init_array+0xc>
 8004386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800438a:	4798      	blx	r3
 800438c:	3501      	adds	r5, #1
 800438e:	e7f2      	b.n	8004376 <__libc_init_array+0x1e>
 8004390:	080043f8 	.word	0x080043f8
 8004394:	080043f8 	.word	0x080043f8
 8004398:	080043f8 	.word	0x080043f8
 800439c:	080043fc 	.word	0x080043fc

080043a0 <memset>:
 80043a0:	4402      	add	r2, r0
 80043a2:	4603      	mov	r3, r0
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d100      	bne.n	80043aa <memset+0xa>
 80043a8:	4770      	bx	lr
 80043aa:	f803 1b01 	strb.w	r1, [r3], #1
 80043ae:	e7f9      	b.n	80043a4 <memset+0x4>

080043b0 <_init>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	bf00      	nop
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr

080043bc <_fini>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	bf00      	nop
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr
